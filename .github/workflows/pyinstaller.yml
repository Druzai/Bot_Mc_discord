name: Build with pyinstaller and release

on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request: null

env:
  RELEASE_URL: None

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [ 3.8 ]
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Get commit tag
        id: commit
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pyinstaller==4.0
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Build with pyinstaller
        env:
          SOURCE_TAG: ${{ steps.commit.outputs.SOURCE_TAG }}
        run: |
          make

      - name: Create release
        if: ${{ env.RELEASE_URL }} == None
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.SOURCE_TAG }}
          release_name: ${{ env.SOURCE_TAG }}

      - name: Ensure release url
        if: ${{ env.RELEASE_URL }} == None
        env:
          RELEASE_URL: steps.create_release.outputs.upload_url
        run: |
          echo ${{ env.RELEASE_URL }}

      - name: Upload release asset with ubuntu
        if: ${{ matrix.os }} == ubuntu-latest
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ./dist_build/Discord_bot
          asset_name: Discord_bot_linux_x64_py_${{ matrix.python-version }}_${{ env.SOURCE_TAG }}
          asset_content_type: application/x-executable

      - name: Upload release asset with windows
        if: ${{ matrix.os }} == windows-latest
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ./dist_build/Discord_bot.exe
          asset_name: Discord_bot_windows_x64_py_${{ matrix.python-version }}_${{ env.SOURCE_TAG }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

