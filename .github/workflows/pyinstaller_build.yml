name: Build with pyinstaller and release

on:
  push:
    branches:
      - master

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.commit.outputs.source_tag }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Get commit tag
        id: commit
        run: echo "source_tag=$(python3 Discord_bot.py -v)" >> $GITHUB_OUTPUT

      - name: Get release notes
        uses: yashanand1910/standard-release-notes@v1.2.1
        id: release_notes
        with:
          changelog_path: ./CHANGELOG.md
          version: ${{ steps.commit.outputs.source_tag }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.commit.outputs.source_tag }}
          release_name: ${{ steps.commit.outputs.source_tag }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

  release_built_assets_for_windows:
    name: Release built assets for Windows
    needs: create_release
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: [ 3.8, "3.10" ]
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==5.6.2

      - name: Build with pyinstaller
        run: make

      - name: Upload release asset for Windows 7
        if: matrix.version == '3.8'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist_build/Discord_bot.exe
          asset_name: Discord_bot_windows_x64_v${{ needs.create_release.outputs.tag }}_win7.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload release asset for Windows 8 and higher
        if: matrix.version != '3.8'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist_build/Discord_bot.exe
          asset_name: Discord_bot_windows_x64_v${{ needs.create_release.outputs.tag }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  release_built_assets_for_unix:
    name: Release built assets
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [ "3.10" ]
        os: [ ubuntu-latest ] # macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==5.6.2

      - name: Install gettext for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install gettext

#      - name: Update certifi and install gettext for macOS
#        if: matrix.os == 'macos-latest'
#        run: |
#          pip install --upgrade certifi
#          CERT_PATH=$(python -m certifi)
#          export SSL_CERT_FILE=${CERT_PATH}
#          export REQUESTS_CA_BUNDLE=${CERT_PATH}
#          brew update
#          brew install gettext

      - name: Build with pyinstaller
        run: make

      - name: Upload release asset with Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist_build/Discord_bot
          asset_name: Discord_bot_linux_x64_v${{ needs.create_release.outputs.tag }}
          asset_content_type: application/x-executable

#      - name: Upload release asset with macOS
#        if: matrix.os == 'macos-latest'
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ needs.create_release.outputs.upload_url }}
#          asset_path: ./dist_build/Discord_bot
#          asset_name: Discord_bot_macos_x64_v${{ needs.create_release.outputs.tag }}
#          asset_content_type: application/x-executable
